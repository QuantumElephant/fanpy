# TEMPLATED FROM https://raw.githubusercontent.com/theochem/python-cython-ci-example/master/.travis.yml

env:
  matrix:
  # - MYCONDAPY=3.5
  - MYCONDAPY=3.6
  global:
    # ANACONDA_TOKEN
    # - secure: NOT_SUPPORTED
    # GITHUB_TOKEN
    # - secure: NOT_SUPPORTED
    # PYPI_PASSWD
    # - secure: NOT_SUPPORTED
    - PROJECT_NAME=wfns
    - GITHUB_REPO_NAME=quantumelephant/olsens
    - CONDA_PKG_NAME_PY=wfns

####
# EVERYTHING BELOW THIS LINE WILL BE COPIED INTO OTHER YMLs
####

# Do not use Travis Python to save some time.
language: generic
os:
  - linux
  - osx
osx_image: xcode8.3
dist: trusty
sudo: false

matrix:
  # We only test on Linux with one specific Python version, unless we make a release. All
  # other cases are allowed to fail and will exit early. With the fast_finish option,
  # travis will send a status update to github as soon as the non-allowed-to-fail has
  # finished. This speeds up testing in PRs.
  #
  # This is not ideal. It would be better to run just one item from the build matrix when
  # not preparing a release. This is not possible on Travis. There are several tickets on
  # travis-ci related to this limitation.
  #
  #    https://github.com/travis-ci/travis-ci/issues/7451
  #    https://github.com/travis-ci/travis-ci/issues/7149
  #    https://github.com/travis-ci/travis-ci/issues/2778
  #    ...
  fast_finish: true
  allow_failures:
  - os: osx


cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- rm -rf $HOME/miniconda/conda-bld
- rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
- pip uninstall -y cardboardlint # Cardboardlint always installs even if no changes are made.

branches:
  only:
    - master
    - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

before_install:
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${MYCONDAPY}" = "2.7" ]; then
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi


install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes
- conda config --add channels theochem
- conda install -q conda conda-build

# Set the version info from the git tag
# - git fetch origin --tags &&
#   export PROJECT_VERSION=$(python tools/gitversion.py) &&
#   python tools/gitversion.py python > ${PROJECT_NAME}/version.py;

# Get a list of all build and runtime dependencies.
# This should become easier, without the copy to conda.recipe.ugly.
# - conda render tools/conda.recipe > tools/conda.recipe/rendered.yaml
# - CONDA_DEPENDENCIES=$(python -c "from yaml import load;
#     req1 = load(open('tools/conda.recipe/rendered.yaml'))['requirements'];
#     deps = req1['build'] + req1['run'];
#     print(' '.join(set(dep.split()[0] for dep in deps)))")
- conda install numpy scipy gmpy2 nose
- pip install cma

# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on metal.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install -q python=${MYCONDAPY} anaconda-client ${CONDA_DEPENDENCIES}
# Install more recent stuff with pip
- pip install --upgrade pylint codecov coverage pycodestyle pydocstyle flake8
# Show conda info for debugging
- conda info -a

# Install the latest cardboardlinter
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    pip install --upgrade git+https://github.com/kimt33/cardboardlint.git@master#egg=cardboardlint;
  fi

script:
# Static linting
# --------------
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    cardboardlinter --refspec $TRAVIS_BRANCH -f static;
  fi

# Unit tests and dynamic linting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - conda build -q tools/conda.recipe
# - conda install --use-local ${CONDA_PKG_NAME_PY}
- python setup.py build_ext -i --define CYTHON_TRACE_NOGIL
- nosetests ${PROJECT_NAME}
  -v --detailed-errors --with-coverage --cover-package=${PROJECT_NAME}
  --cover-tests --cover-inclusive --cover-branches -a '!slow'
- coverage xml -i
# - conda uninstall ${CONDA_PKG_NAME_PY}

# Make CPP and PY source package for github deployment
# - python setup.py sdist;

# Some other stuff
# ----------------

# Compile documentation
- if [[ -e doc ]]; then
    (cd doc; make html);
  fi

after_success:
# Upload the coverage analysis
- codecov -f coverage.xml
