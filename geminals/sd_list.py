from . import slater
from itertools import combinations, product

"""
Functions
---------
ci_sd_list
    Generates a list of Slater determinants that corresponds to the given order of excitations
doci_sd_list
    Generates a list of doubly occupied Slater determinants that corresponds to the given order of
    (double) excitations

"""


def generate_ci_sd_list(nspatial, nelec, max_dets, exc_orders=[]):
    """ Generates list of  Slater determinants

    The list of determinants contains the ground state Slater determinant followed by the first
    excitations from exc_orders, then second excitation from exc_orders, etc.
    Number of Slater determinants is limited by max_dets.

    Parameters
    ----------
    nspatial : int
        Number of spatial orbitals
    nelec : int
        Number of electrons
    max_dets : int
        Maximum number of Slater determinants to be generated
    exc_orders : list of int
        Order of excitations to consider (with respect to ground state Slater determinant)
        Slater determinants of the first excitation will be included first, second excitations
        included second, etc

    Returns
    -------
    civec : list of ints
        List of integers that describe the occupation of Slater determinants as bitstrings

    Note
    ----
    Crashes if order of excitation is less than 0
    """
    # Determinants are stored in a list starting with ground state deteminant
    # followed by excited determinants based on excitation orders
    # (i.e. all determinants generated by the 1st excitation order, then all
    # determinants generated by the 2nd excitation order, etc.).
    civec = []

    if not exc_orders:
        # consider all possible excitations
        exc_orders = range(1, nelec + 1)

    # Ground state determinant is occupied according to aufbau principle
    # (i.e. spin orbitals are considered to be energy-ordered & the lowest
    # spin orbitals are filled by alpha & beta electrons)
    ground = slater.ground(nelec, 2 * nspatial)
    civec.append(ground)

    # Get indices of occupied/virtual alpha & beta spin orbitals
    occ_indices = slater.occ_indices(ground)
    vir_indices = slater.vir_indices(ground, 2 * nspatial)
    # Sort occupied indices by decreasing energy (i.e. occupied alpha & beta
    # spin orbitals with higher index appear at the beginning of the list),
    # so that excitations start from the highest occupied orbitals.
    occ_indices = sorted(occ_indices, key=lambda x: x - nspatial if x >= nspatial else x, reverse=True)
    # Virtuals are always in the right order, so no need to sort.
    # vir_indices = sorted(vir_indices, key=lambda x: x - nspatial if x >= nspatial else x)

    count = 1
    for nexc in exc_orders:
        # possible choices for exciting nexc electrons from occupied to virtual orbitals
        occ_combinations = combinations(occ_indices, nexc)
        vir_combinations = combinations(vir_indices, nexc)
        for occ, vir in product(occ_combinations, vir_combinations):
            indices = occ + vir
            sd = slater.excite(ground, *indices)
            civec.append(sd)
            count += 1
            if count >= max_dets:
                return civec[:max_dets]
    return civec[:max_dets]


def generate_doci_sd_list(nspatial, nelec, npair, max_dets, exc_orders=[]):
    """ Generates list of doubly occupied (DOCI) Slater determinants

    DOCI Slater determinants are all pairwise (alpha beta) excitations of the ground state
    singlet Slater determinant. The list of determinants contains the ground
    state Slater determinant next followed by the first pair excitations from exc_orders, then
    second pair excitations from exc_orders, etc. Number of Slater determinants is limited by max_dets.

    Parameters
    ----------
    nspatial : int
        Number of spatial orbitals
    nelec : int
        Number of electrons
    npair : int
        Number of electron pairs (rounded down)
    max_dets : int
        Maximum number of Slater determinants to be generated
    exc_orders : list of int
        Order of pair excitations to consider (with respect to ground state Slater determinant)
        Slater determinants of the first excitation will be included first, second excitations
        included second, etc

    Returns
    -------
    civec : list of ints
        List of integers that describe the occupation of Slater determinants as bitstrings

    Note
    ----
    Crashes if order of excitation is less than 0
    """
    # Determinants are stored in a list starting with ground state deteminant
    # followed by excited determinants based on excitation orders
    # (i.e. all determinants generated by the 1st excitation order, then all
    # determinants generated by the 2nd excitation order, etc.).
    civec = []

    if not exc_orders:
        # consider all possible pair excitations
        exc_orders = range(1, npair + 1)

    # Ground state determinant is occupied according to aufbau principle
    # (i.e. spin orbitals are considered to be energy-ordered & the lowest
    # spin orbitals are filled by alpha & beta electrons)
    ground = slater.ground(nelec, 2 * nspatial)
    civec.append(ground)

    count = 1
    for nexc in exc_orders:
        # Possible choices for occupied and virtual alpha spin orbitals
        # (note that alpha and beta spin orbitals are occupied in pairs)
        occ_combinations = combinations(reversed(range(npair)), nexc)
        vir_combinations = combinations(range(npair, nspatial), nexc)
        for occ, vir in product(occ_combinations, vir_combinations):
            # Exciting nexc electron pairs from occupied to virtual orbitals
            # Get indicies of occupied/virtual pair-occupied alpha & beta spin orbitals
            occ = [i for i in occ] + [i + nspatial for i in occ]
            vir = [a for a in vir] + [a + nspatial for a in vir]
            indices = occ + vir
            sd = slater.excite(ground, *indices)
            civec.append(sd)
            count += 1
            if count >= max_dets:
                return civec[:max_dets]
    return civec[:max_dets]
